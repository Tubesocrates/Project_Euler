import math
"""The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""

# create a function to find triangle numbers
# use function to find devisors
# use length function to make len(factors) > 500

triangle_numbers = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]

def next_trianlge_number(triangle_numbers):
    next_triangle_number = (len(triangle_numbers) + 1) + triangle_numbers[-1]
    triangle_numbers.append(next_triangle_number)
    return next_triangle_number, triangle_numbers

print(next_trianlge_number(triangle_numbers))
print(triangle_numbers)

def find_divisors(n):
    divisors = []
    i = 1
    while i < math.sqrt(n):
        if (n%i == 0):
            if n // i == i:
                divisors.append(i)
            else:
                divisors.append(i)
                divisors.append(n//i)
        i += 1
    divisors.sort()
    return divisors

# for num in triangle_numbers:
#     print(num, find_divisors(num))
def main(triangle_numbers):
    num = triangle_numbers[-1]
    while 500 > len(find_divisors(num)):
        num, triangle_numbers = next_trianlge_number(triangle_numbers)
    return num, len(find_divisors(num)), triangle_numbers[-2], len(find_divisors(triangle_numbers[-2]))

print(main(triangle_numbers))